Below programs is anonymous function & IIFE:

                                           1. Print odd numbers in an array

Anonymous function:
const printOddNumbers = function(numbers) {
    for (let i = 0; i < numbers.length; i++) {
        if (numbers[i] % 2 !== 0) {
            console.log(numbers[i]);
        }
    }
};
printOddNumbers([1, 2, 3, 4, 5]); // Output: 1 3 5


IIFE:
(function(numbers) {
    for (let i = 0; i < numbers.length; i++) {
        if (numbers[i] % 2 !== 0) {
            console.log(numbers[i]);
        }
    }
})([1, 2, 3, 4, 5]); // Output: 1 3 5


                                           2.Convert all the strings to title caps in a string array

Anonymous function:
const convertToTitleCaps = function(strings) {
    const titleCaps = strings.map(function(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    });
    console.log(titleCaps);
};
convertToTitleCaps(["hello", "world", "javascript"]); // Output: ["Hello", "World", "Javascript"]


IIFE:
(function(strings) {
    const titleCaps = strings.map(function(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    });
    console.log(titleCaps);
})(["hello", "world", "javascript"]); // Output: ["Hello", "World", "Javascript"]


                                           3.Sum of all numbers in an array

Anonymous function:
const sumArray = function(numbers) {
    let sum = 0;
    for (let i = 0; i < numbers.length; i++) {
        sum += numbers[i];
    }
    console.log(sum);
};
sumArray([1, 2, 3, 4, 5]); // Output: 15


IIFE:
(function(numbers) {
    let sum = 0;
    for (let i = 0; i < numbers.length; i++) {
        sum += numbers[i];
    }
    console.log(sum);
})([1, 2, 3, 4, 5]); // Output: 15



                                         4.Return all the prime numbers in an array

Anonymous function:
const getPrimeNumbers = function(numbers) {
    const primes = numbers.filter(function(number) {
        if (number <= 1) {
            return false;
        }
        for (let i = 2; i <= Math.sqrt(number); i++) {
            if (number % i === 0) {
                return false;
            }
        }
        return true;
    });
    console.log(primes);
};
getPrimeNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]); // Output: [2, 3, 5, 7]


IIFE:
(function(numbers) {
    const primes = numbers.filter(function(number) {
        if (number <= 1) {
            return false;
        }
        for (let i = 2; i <= Math.sqrt(number); i++) {
            if (number % i === 0) {
                return false;
            }
        }
        return true;
    });
    console.log(primes);
})([1, 2, 3, 4, 5, 6, 7, 8, 9]); // Output: [2, 3, 5, 7]


                                      5.Return all the palindromes in an array

Anonymous function:
const getPalindromes = function(strings) {
    const palindromes = strings.filter(function(str) {
        return str === str.split('').reverse().join('');
    });
    console.log(palindromes);
};
getPalindromes(["racecar", "hello", "level", "world"]); // Output: ["racecar", "level"]


IIFE:
(function(strings) {
    const palindromes = strings.filter(function(str) {
        return str === str.split('').reverse().join('');
    });
    console.log(palindromes);
})(["racecar", "hello", "level", "world"]); // Output: ["racecar", "level"]


                                   6.Return median of two sorted arrays of the same size.

Anonymous function:
const getMedianOfArrays = function(array1, array2) {
    const mergedArray = array1.concat(array2).sort(function(a, b) {
        return a - b;
    });
    const mid = Math.floor(mergedArray.length / 2);
    const median = mergedArray.length % 2 === 0 ? (mergedArray[mid - 1] + mergedArray[mid]) / 2 : mergedArray[mid];
    console.log(median);
};
getMedianOfArrays([1, 2, 3], [4, 5, 6]); // Output: 3.5


IIFE:
(function(array1, array2) {
    const mergedArray = array1.concat(array2).sort(function(a, b) {
        return a - b;
    });
    const mid = Math.floor(mergedArray.length / 2);
    const median = mergedArray.length % 2 === 0 ? (mergedArray[mid - 1] + mergedArray[mid]) / 2 : mergedArray[mid];
    console.log(median);
})([1, 2, 3], [4, 5, 6]); // Output: 3.5


                                   7.Remove duplicates from an array

Anonymous function:
const removeDuplicates = function(array) {
    const uniqueArray = [];
    for (let i = 0; i < array.length; i++) {
        if (uniqueArray.indexOf(array[i]) === -1) {
            uniqueArray.push(array[i]);
        }
    }
    console.log(uniqueArray);
};
removeDuplicates([1, 2, 3, 2, 4, 5, 1]); // Output: [1, 2, 3, 4, 5]


IIFE:
(function(array) {
    const uniqueArray = [];
    for (let i = 0; i < array.length; i++) {
        if (uniqueArray.indexOf(array[i]) === -1) {
            uniqueArray.push(array[i]);
        }
    }
    console.log(uniqueArray);
})([1, 2, 3, 2, 4, 5, 1]); // Output: [1, 2, 3, 4, 5]


                                8.Rotate an array by k times

Anonymous function:
const rotateArray = function(array, k) {
    const rotations = k % array.length;
    const rotatedArray = array.slice(rotations).concat(array.slice(0, rotations));
    console.log(rotatedArray);
};
rotateArray([1,8, 9, 10, 11], 3); // Output: [8, 9, 10, 11, 1, 2, 3, 4, 5, 6, 7]


IIFE:
(function(array, k) {
    const rotations = k % array.length;
    const rotatedArray = array.slice(rotations).concat(array.slice(0, rotations));
    console.log(rotatedArray);
})([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 3); // Output: [8, 9, 10, 11, 1, 2, 3, 4, 5, 6, 7]














